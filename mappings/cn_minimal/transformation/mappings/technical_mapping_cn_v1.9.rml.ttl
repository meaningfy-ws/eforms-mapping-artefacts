#--- technical_mapping_cn_v1.9.rml.ttl ---
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix locn: <http://www.w3.org/ns/locn#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix tedm: <http://data.europa.eu/a4g/mapping/sf-rml/> .
@prefix epd: <http://data.europa.eu/a4g/resource/> .
@prefix epo: <http://data.europa.eu/a4g/ontology#> .
@prefix epo-not: <http://data.europa.eu/a4g/ontology#>.
@prefix cv: <http://data.europa.eu/m8g/> .
@prefix cccev: <http://data.europa.eu/m8g/> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix cpov: <http://data.europa.eu/m8g/> .
@prefix	foaf: <http://xmlns.com/foaf/0.1/> .
@prefix time: <http://www.w3.org/2006/time#>.
@prefix adms: <http://www.w3.org/ns/adms#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix fnml:   <http://semweb.mmlab.be/ns/fnml#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix idlab-fn: <http://example.com/idlab/function/> .

# to be copied in the appropriate mapping suite, together with all related imports, if it is the case.
tedm:technical_mapping_cn_v19
  a owl:Ontology ;
  #owl:imports 	tedm:contracting_authority, tedm:object, tedm:procedure, tedm:award_of_contract, tedm:complementary_information, tedm:annexe_d1, tedm:notice;
  dct:description "This module provides the mapping definitions for the eForm subtypes 10-24 for SDK v1.9 against ePO 4.0.0"@en ;
  rdfs:label "TED-SWS mapping of eForm subtypes 10-24 SDK v1.9 ePO 4.0.0"@en ;
  dct:date "2024-02-15"^^xsd:date
.

# this is an example of an MG with the same template of another (MG-Notice) required for conditional assertions
tedm:MG-CompetitionNotice_ND-Root
    a rr:TriplesMap ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            # this is an example of a complex multi-element condition for instantiation of a subject not suitable as a condition below the iterator
            rml:iterator "if(/*/cbc:NoticeTypeCode/@listName='competition' or /*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:NoticeSubType/cbc:SubTypeCode=('10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24') or exists(/ContractNotice)) then /* else null" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-Root" ;
            rdfs:comment "Primary type declaration for MG-Notice under ND-Root" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Notice" ;
            rr:class epo-not:CompetitionNotice
        ] ;
    # this is an example of a (backpropagated) association that is not represented by a BT/field
    rr:predicateObjectMap
        [
            rdfs:label "MG-Buyer-announcesRole-CompetitionNotice" ;
            rdfs:comment "MG-Buyer-announcesRole-CompetitionNotice under ND-ContractingParty" ;
            rr:predicate epo-not:announcesRole ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Buyer_ND-ContractingParty
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "MG-ProcurementServiceProvider-announcesRole-CompetitionNotice" ;
            rdfs:comment "MG-ProcurementServiceProvider-announcesRole-CompetitionNotice under ND-ServiceProviderParty" ;
            rr:predicate epo-not:announcesRole ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-ProcurementServiceProvider_ND-ServiceProviderParty
                ] ;
        ] ;
.

tedm:MG-Notice_ND-Root
    a rr:TriplesMap ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*";
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-Root" ;
            rdfs:comment "Primary type declaration for MG-Notice under ND-Root" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Notice" ;
            rr:class epo:Notice
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-02-notice" ;
            rdfs:comment "Notice Type of MG-Notice under ND-Root" ;
            rr:predicate epo:hasNoticeType ;
            rr:objectMap
                [
                    rdfs:label "at-voc:notice-type" ;
                    rml:reference "cbc:NoticeTypeCode" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-03-notice" ;
            rdfs:comment "Form Type of MG-Notice under ND-Root" ;
            rr:predicate epo:hasFormType ;
            rr:objectMap
                [
                    rdfs:label "at-voc:form-type" ;
                    rml:reference "cbc:NoticeTypeCode/@listName" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:comment "The identifier of a notice" ;
            rr:predicate adms:identifier ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Identifier-identifier-Notice_ND-Root
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            # TODO: we may have to concatenate this with ID, confirm with OP with example
            rdfs:label "BT-757-notice" ;
            rdfs:comment "Notice Version of MG-Notice under ND-Root" ;
            rr:predicate epo:hasVersion ;
            rr:objectMap
                [
                    rml:reference "cbc:VersionID" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-702(a)-notice" ;
            rdfs:comment "Notice Official Language of MG-Notice under ND-Root" ;
            rr:predicate epo:hasOfficialLanguage ;
            rr:objectMap
                [
                    rdfs:label "at-voc:language" ;
                    rml:reference "cbc:NoticeLanguageCode" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-05(a)-notice and BT-05(b)-notice" ;
            rdfs:comment "Notice Dispatch Date and Notice Dispatch Time of MG-Notice under ND-Root" ;
            rr:predicate epo:hasDispatchDate ;
            rr:objectMap
                [
                    # here we combine values across (relative) XPaths/fields stripping out the time zone from the first
                    # it handles the case where there is no time zone indicated in the date time, just in case validation failed on a notice
                    # however, it won't handle the case if there are other malformations
                    rml:reference "if(exists(cbc:IssueDate) and exists(cbc:IssueTime) and contains(cbc:IssueDate, '+')) then substring-before(cbc:IssueDate, '+') || 'T' || cbc:IssueTime else if(exists(cbc:IssueDate) and exists(cbc:IssueTime)) then cbc:IssueDate || 'T' || cbc:IssueTime else if(exists(cbc:IssueDate)) then cbc:IssueDate else null" ;
                    rr:datatype xsd:dateTime ;
                ] ;
        ] ;
    # this is an example of a predicate which has an orthogonal XPath compared to its subject
    rr:predicateObjectMap
        [
            rdfs:label "OPP-070-notice" ;
            rdfs:comment "Notice Subtype of MG-Notice under ND-Root" ;
            rr:predicate epo:hasEFormsSubtype ;
            rr:objectMap
                [
                    rml:reference "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:NoticeSubType/cbc:SubTypeCode" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "OPP-010-notice" ;
            rdfs:comment "Notice Publication Number of MG-Notice under ND-Root" ;
            rr:predicate epo:hasNoticePublicationNumber ;
            rr:objectMap
                [
                    rml:reference "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Publication/efbc:NoticePublicationID[@schemeName='ojs-notice-id']" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "OPP-011-notice" ;
            rdfs:comment "OJEU Identifier of MG-Notice under ND-Root" ;
            rr:predicate epo:hasOJSIssueNumber ;
            rr:objectMap
                [
                    rml:reference "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Publication/efbc:GazetteID[@schemeName='ojs-id']" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "OPP-012-notice" ;
            rdfs:comment "OJEU Publication Date of MG-Notice under ND-Root" ;
            rr:predicate epo:hasPublicationDate ;
            rr:objectMap
                [
                    rml:reference "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Publication/efbc:PublicationDate" ;
                    rr:datatype xsd:date ;
                ] ;
        ] ;
.

# this is an example of a composition instance
# (subject is a child dependent on its parent,
# i.e. Identifier dependent on Notice)
tedm:MG-Identifier-identifier-Notice_ND-Root a rr:TriplesMap ;
    rdfs:comment "The identifier of a notice" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cbc:ID[@schemeName='notice-id']";
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "BT-701-notice" ;
            # TODO can this become a template since the iterator is already on the required element?
            rml:reference "if (exists(/*/cbc:ID[@schemeName='notice-id'])) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_NoticeIdentifier_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw') else null" ;
            # rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_NoticeIdentifier_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw')}" ;
            rr:class adms:Identifier
        ] ;
    rr:predicateObjectMap
        [

            rr:predicate skos:notation ;
            rr:objectMap
                [
                    rml:reference ".";
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-701-notice-Scheme" ;
            rdfs:comment "Scheme of MG-Identifier for MG-Notice under ND-Root" ;
            rr:predicate epo:hasScheme ;
            rr:objectMap
                [
                    rml:reference "./@schemeName";
                ] ;
        ] ;
.

# this is an example of a role being declared on a node
tedm:MG-Buyer_ND-ContractingParty a rr:TriplesMap ;
    rdfs:label "MG-Buyer" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:ContractingParty";
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-ContractingParty" ;
            rdfs:comment "Primary type declaration for MG-Buyer under ND-ContractingParty" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Buyer_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw')}" ;
            rr:class epo:Buyer
        ] ;
    # this is an example of an association to an independent resource (role to organization)
    # TODO should this be another TMap, since it is under ND-ServiceProvider node instead of ND-ContractingParty?
    rr:predicateObjectMap
        [
            rdfs:label "OPT-300-Procedure-Buyer" ;
            rdfs:comment "Buyer Technical Identifier Reference" ;
            rr:predicate epo:playedBy ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Organization-playedBy-Buyer_ND-ServiceProvider ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            # this is an example of a conditioned attribute where neither type, legalType or ePO type are the same
            rdfs:label "BT-740-Procedure-Buyer (cont-ent)" ;
            rdfs:comment "Is BuyerContractingEntity of MG-Buyer under ND-ContractingParty, TRUE case" ;
            rr:predicate epo:isContractingEntity ;
            rr:objectMap
                [
                    rml:reference "if(/*/cac:ContractingParty/cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-contracting-type']/text()='cont-ent') then 'true' else null" ;
                    rr:datatype xsd:boolean ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-740-Procedure-Buyer (not-cont-ent)" ;
            rdfs:comment "Is BuyerContractingEntity of MG-Buyer under ND-ContractingParty, FALSE case" ;
            rr:predicate epo:isContractingEntity ;
            rr:objectMap
                [
                    rml:reference "if(/*/cac:ContractingParty/cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-contracting-type']/text()='not-cont-ent') then 'false' else null" ;
                    rr:datatype xsd:boolean ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-508-Procedure-Buyer" ;
            rdfs:comment "Buyer Profile URL of of MG-Buyer under ND-ContractingParty" ;
            rr:predicate epo:hasBuyerProfile ;
            rr:objectMap
                [
                    rml:reference "cbc:BuyerProfileURI";
                    rr:datatype xsd:anyURI
                ] ;
        ] ;
.

tedm:MG-Organization_ND-Company a rr:TriplesMap ;
    rdfs:label "MG-Organization" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            # TODO why do we not iterate one level up on Organization?
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:Company" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-Company" ;
            rdfs:comment "Primary type declaration for MG-Organization under ND-Company" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Organization_{cac:PartyIdentification/cbc:ID}" ;
            rr:class org:Organization
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasPrimaryContactPoint ;
            rr:objectMap
                [
                    rdfs:label "ND-CompanyContact" ;
                    rr:parentTriplesMap tedm:MG-ContactPoint-hasPrimaryContactPoint-Organization_ND-CompanyContact ;
                    # TODO how does this work?
                    rr:joinCondition [
                        rr:child "path(.)" ;
                        rr:parent "path(../.)" ;
                    ] ;
                ]
        ] ;
    # rr:predicateObjectMap
    #     [
    #         #The channel of ND-Company it is created for the BT-509-Organization-Company it does not correspond to a node"
    #         rr:predicate epo:hasDeliveryGateway ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ND-CompanyChannel ;
    #                 rr:joinCondition [
    #                     rr:child "path(.)";
    #                     rr:parent "path(.)";
    #                 ];
    #             ]
    #     ] ;
    rr:predicateObjectMap
        [
            rdfs:label "Aggregate Address" ;
            rdfs:comment "Aggregate values of MG-Address under ND-CompanyAddress" ;
            rr:predicate cv:registeredAddress ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Address-registeredAddress-Organization_ND-CompanyAddress ;
                    rr:joinCondition [
                        rr:child "path(.)" ;
                        rr:parent "path(../.)" ;
                    ] ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-500-Organization-Company" ;
            rdfs:comment "Organisation Name of MG-Organization under ND-Company" ;
            rr:predicate epo:hasLegalName ;
            rr:objectMap
                [
                    rml:reference "cac:PartyName/cbc:Name" ;
                    # this was used initially but wrong as it would pick up Contact name
                    # rml:reference "descendant::cbc:Name" ;
                    rml:languageMap [
                        rml:reference "lower-case(cac:PartyName/cbc:Name/@languageID)"
                    ] ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "OPT-200-Organization-Company" ;
            rdfs:comment "Organisation Technical Identifier of MG-Organization under ND-Company" ;
            rr:predicate adms:identifier ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Identifier-identifier-Organization_ND-Company ;
                    # TODO how does this work?
                    rr:joinCondition [
                        rr:child "path(.)" ;
                        rr:parent "path(.)" ;
                    ] ;
                ]
        ] ;
    rr:predicateObjectMap
        [
            # TODO versions
            rdfs:label "BT-501-Organization-Company" ;
            rdfs:comment "Organisation Identifier of MG-Organization under ND-Company" ;
            rr:predicate epo:hasLegalIdentifier ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Identifier-hasLegalIdentifier-Organization_ND-Company ;
                    rr:joinCondition [
                        rr:child "path(.)" ;
                        rr:parent "path(.)" ;
                    ] ;
                ]
        ] ;
.

tedm:MG-Identifier-identifier-Organization_ND-Company a rr:TriplesMap ;
    rdfs:label "MG-Identifier" ;
    rdfs:comment "The identifier of an organization" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:Company" ;
            rml:referenceFormulation ql:XPath
        ];
    rr:subjectMap
        [
            rdfs:label "ND-Company" ;
            rml:reference "if (exists(cac:PartyIdentification/cbc:ID)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_Identifier_' || cac:PartyIdentification/cbc:ID else null" ;
            # rml:reference "if (exists(cac:PartyIdentification/cbc:ID)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_OrganisationIdentifier_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path(cac:PartyIdentification/cbc:ID)) || '?response_type=raw') else null" ;
            rr:class epo:Identifier
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "identifier" ;
            rr:predicate skos:notation ;
            rr:objectMap
                [
                    rml:reference "cac:PartyIdentification/cbc:ID" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "OPT-200-Organization-Company-Scheme" ;
            rdfs:comment "Scheme of MG-Identifier for MG-Organization under ND-Company" ;
            rr:predicate epo:hasScheme ;
            rr:objectMap
                [
                    rml:reference "cac:PartyIdentification/cbc:ID/@schemeName";
                ] ;
        ] ;
.

tedm:MG-Identifier-hasLegalIdentifier-Organization_ND-Company a rr:TriplesMap ;
    rdfs:label "MG-Identifier" ;
    rdfs:comment "The legal identifier of an organization" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:Company" ;
            rml:referenceFormulation ql:XPath
        ];
    rr:subjectMap
        [
            rdfs:label "ND-Company" ;
            rml:reference "if (exists(cac:PartyLegalEntity/cbc:CompanyID)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_OrganisationIdentifier_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path(cac:PartyLegalEntity/cbc:CompanyID)) || '?response_type=raw') else null" ;
            rr:class epo:Identifier
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "legal identifier" ;
            rr:predicate skos:notation ;
            rr:objectMap
                [
                    rml:reference "cac:PartyLegalEntity/cbc:CompanyID" ;
                ] ;
        ] ;
.

tedm:MG-Address-registeredAddress-Organization_ND-CompanyAddress a rr:TriplesMap ;
    rdfs:label "MG-Address" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:Company/cac:PostalAddress" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-CompanyAddress" ;
            rdfs:comment "Primary type declaration for Address-registeredAddress-Organization under ND-CompanyAddress" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_CompanyAddress_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw')}" ;
            rr:class locn:Address

        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-16,BT-510(a|b|c),BT-512,BT-513,514-Organization-Company" ;
            rdfs:comment "Aggregate of Department, Street, Streetline 1, Streetline 2, Organisation City, Organisation Post Code, Organisation Country Code" ;
            rr:predicate locn:fullAddress ;
            rr:objectMap
                [
                    rml:reference "normalize-space(cbc:Department || ' ' || cbc:StreetName || ' ' || cbc:AdditionalStreetName || ' ' || cbc:Line || ' ' || cbc:CityName || ' ' || cbc:PostalZone || ' ' || cac:Country/cbc:IdentificationCode)" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-513-Organization-Company" ;
            rr:predicate locn:postName ;
            rr:objectMap
                [
                    rml:reference "cbc:CityName" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-512-Organization-Company" ;
            rr:predicate locn:postCode  ;
            rr:objectMap
                [
                    rml:reference "cbc:PostalZone" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-507-Organization-Company" ;
            rr:predicate epo:hasNutsCode ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:nuts ;
                    rr:joinCondition [
                        rr:child "cbc:CountrySubentityCode" ;
                        rr:parent "code.value" ;
                    ] ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-514-Organization-Company";
            rr:predicate epo:hasCountryCode ;
            rr:objectMap
                [
                    # rml:reference "descendant::cbc:IdentificationCode" ;
                    rml:reference "cac:Country/cbc:IdentificationCode" ;
                ] ;
                # TODO: update at-voc to put out iso3
                # [
                #     rr:parentTriplesMap tedm:country ;
                #     rr:joinCondition [
                #         rr:child "cac:Country/cbc:IdentificationCode" ;
                #         rr:parent "code.value" ;
                #     ] ;
                # ] ;
        ] ;
.

tedm:MG-ContactPoint-hasPrimaryContactPoint-Organization_ND-CompanyContact a rr:TriplesMap ;
    rdfs:label "MG-ContactPoint-hasPrimaryContactPoint-Organization";
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:Company/cac:Contact" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-CompanyContact" ;
            rdfs:comment "Primary type declaration for MG-ContactPoint-hasPrimaryContactPoint-Organization under ND-CompanyContact" ;
            rml:reference "if(exists(cbc:Name) or exists(cbc:ElectronicMail) or exists(cbc:Telephone) or exists(cbc:Telefax)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_CompanyContactPoint_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw') else null" ;
            rr:class cpov:ContactPoint

        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-502-Organization-Company" ;
            rr:predicate epo:hasContactName ;
            rr:objectMap
                [
                    rml:reference "cbc:Name" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-506-Organization-Company";
            rr:predicate cpov:email ;
            rr:objectMap
                [
                    rml:reference "cbc:ElectronicMail" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-503-Organization-Company" ;
            rr:predicate cpov:telephone ;
            rr:objectMap
                [
                    rml:reference "cbc:Telephone" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-739-Organization-Company" ;
            rr:predicate epo:hasFax ;
            rr:objectMap
                [
                    rml:reference "cbc:Telefax" ;
                ] ;
        ] ;
    # this is an example of a predicate with an XPath at the parent
    rr:predicateObjectMap
        [
            rdfs:label "BT-505-Organization-Company" ;
            rr:predicate epo:hasInternetAddress ;
            rr:objectMap
                [
                    rml:reference "../cbc:WebsiteURI" ;
                    rr:datatype xsd:anyURI ;
                ] ;
        ] ;
.

tedm:MG-ContactPoint_ND-Touchpoint a rr:TriplesMap ;
    rdfs:label "MG-ContactPoint" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:TouchPoint";
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-Touchpoint" ;
            rdfs:comment "Primary type declaration for MG-ContactPoint under ND-Touchpoint" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_TouchPoint_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw')}" ;
            rr:class cpov:ContactPoint
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "BT-500-Organization-TouchPoint" ;
            rdfs:comment "Name" ;
            rr:predicate dct:description ;
            rr:objectMap
                [
                    rml:reference "cac:PartyName/cbc:Name" ;
                    rml:languageMap [
                        rml:reference "lower-case(cac:PartyName/cbc:Name/@languageID)"
                    ] ;
                ] ;
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "OPT-201-Organization-TouchPoint" ;
            rdfs:comment "TouchPoint Technical Identifier" ;
            rr:predicate adms:identifier ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Identifier-identifier-ContactPoint_ND-Touchpoint ;
                    # TODO: how does this work?
                    rr:joinCondition [
                        rr:child "path(.)" ;
                        rr:parent "path(../.)" ;
                    ] ;
                ]
        ] ;
        rr:predicateObjectMap
        [
            rr:predicate locn:address ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Address-address-ContactPoint_ND-TouchpointAddress ;
                    # TODO how does this work?
                    rr:joinCondition [
                        rr:child "path(.)" ;
                        rr:parent "path(../.)" ;
                    ] ;
                ]
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "BT-505-Organization-TouchPoint";
            rr:predicate epo:hasInternetAddress ;
            rr:objectMap
                [
                    rml:reference "cbc:WebsiteURI" ;
                    rr:datatype xsd:anyURI ;
                ] ;
        ] ;
.

tedm:MG-Identifier-identifier-ContactPoint_ND-Touchpoint a rr:TriplesMap ;
    rdfs:label "MG-Identifier" ;
    rdfs:comment "The identifier of a touchpoint" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:TouchPoint/cac:PartyIdentification" ;
            rml:referenceFormulation ql:XPath
        ];
    rr:subjectMap
        [
            rdfs:label "ND-Touchpoint" ;
            rml:reference "if (exists(cbc:ID)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_Identifier_' || cbc:ID else null" ;
            # rml:reference "if (exists(cbc:ID)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_TouchPointIdentifier_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw') else null" ;
            rr:class epo:Identifier
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "identifier";
            rr:predicate skos:notation ;
            rr:objectMap
                [
                    rml:reference "cbc:ID";
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "OPT-200-Organization-TouchPoint-Scheme" ;
            rdfs:comment "Scheme of MG-Identifier for MG-ContactPoint under ND-Touchpoint" ;
            rr:predicate epo:hasScheme ;
            rr:objectMap
                [
                    rml:reference "cbc:ID/@schemeName";
                ] ;
        ] ;
.

tedm:MG-Address-address-ContactPoint_ND-TouchpointAddress a rr:TriplesMap ;
    rdfs:label "ND-TouchpointAddress" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:TouchPoint/cac:PostalAddress" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-TouchpointAddress" ;
            rdfs:comment "Primary type declaration for MG-Address-address-ContactPoint under ND-TouchpointAddress" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_TouchPointAddress_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw')}" ;
            rr:class locn:Address
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-16,BT-510(a|b|c),BT-512,BT-513,514-Organization-Touchpoint" ;
            rdfs:comment "Department, Street, Streetline 1, Streetline 2, Organisation City, Organisation Post Code, Organisation Country Code" ;
            rr:predicate locn:fullAddress ;
            rr:objectMap
                [
                    rml:reference "normalize-space(cbc:Department || ' ' || cbc:StreetName || ' ' || cbc:AdditionalStreetName || ' ' || cbc:Line || ' ' || cbc:CityName || ' ' || cbc:PostalZone || ' ' || cac:Country/cbc:IdentificationCode)" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-513-Organization-TouchPoint" ;
            rdfs:comment "City" ;
            rr:predicate locn:postName ;
            rr:objectMap
                [
                    rml:reference "cbc:CityName" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-512-Organization-TouchPoint" ;
            rdfs:comment "City" ;
            rr:predicate locn:postCode  ;
            rr:objectMap
                [
                    rml:reference "cbc:PostalZone" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-507-Organization-TouchPoint" ;
            rdfs:comment "Country Subdivision" ;
            rr:predicate epo:hasNutsCode ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:nuts;
                    rr:joinCondition [
                        rr:child "cbc:CountrySubentityCode";
                        rr:parent "code.value" ;
                    ] ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-514-Organization-TouchPoint" ;
            rr:predicate epo:hasCountryCode ;
            rr:objectMap
                [
                    # TODO: map to vocab once updated to iso-3
                    # this is an example of a workaround to instantiate vocabulary IRIs instead of mapping to a vocabulary parent resource
                    rml:reference "'http://publications.europa.eu/resource/authority/country/' || cac:Country/cbc:IdentificationCode" ;
                    rr:termType rr:IRI ;
                ] ;
        ]
.

# this is an example of a TMap with the same IRI as another (tedm:MG-ContactPoint_ND-Touchpoint)
# (this could alternatively all go into the other TMap instead)
tedm:MG-ContactPoint_ND-TouchpointContact a rr:TriplesMap ;
    rdfs:label "MG-ContactPoint" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension/efac:Organizations/efac:Organization/efac:TouchPoint/cac:Contact" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-TouchpointContact" ;
            rdfs:comment "Primary type declaration for MG-ContactPoint under ND-TouchpointContact" ;
            # this is an example of an IRI reference with a parent path and the type name not matching the parent node but of the ancestor
            rml:reference "if(exists(cbc:Name) or exists(cbc:ElectronicMail) or exists(cbc:Telephone) or exists(cbc:Telefax)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_TouchPoint_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path(..)) || '?response_type=raw') else null" ;
            rr:class cpov:ContactPoint
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-502-Organization-TouchPoint" ;
            rdfs:comment "Contact Point" ;
            rr:predicate epo:hasContactName ;
            rr:objectMap
                [
                    rml:reference "cbc:Name" ;
                ] ;
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "BT-506-Organization-TouchPoint" ;
            rdfs:comment "Contact Email Address" ;
            rr:predicate cpov:email ;
            rr:objectMap
                [
                    rml:reference "cbc:ElectronicMail" ;
                ] ;
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "BT-503-Organization-TouchPoint" ;
            rdfs:comment "Contact Telephone Number" ;
            rr:predicate cpov:telephone ;
            rr:objectMap
                [
                    rml:reference "cbc:Telephone" ;
                ] ;
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "BT-739-Organization-TouchPoint" ;
            rdfs:comment "Contact Fax" ;
            rr:predicate epo:hasFax ;
            rr:objectMap
                [
                    rml:reference "cbc:Telefax" ;
                ] ;
        ] ;
.

tedm:MG-Organization-playedBy-Buyer_ND-ServiceProvider a rr:TriplesMap ;
    rdfs:label "MG-Organization-playedBy-Buyer" ;
    rdfs:comment "Represents the Buyer Organization" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:ContractingParty/cac:Party";
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-ServiceProvider" ;
            rdfs:comment "Primary type declaration for MG-Organization-playedBy-Buyer under ND-ServiceProvider" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Organization_{cac:PartyIdentification/cbc:ID}" ;
            rr:class org:Organization
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-11-Procedure-Buyer" ;
            rdfs:comment "Buyer Legal Type" ;
            rr:predicate epo:hasBuyerLegalType ;
            rr:objectMap
                [
                    rdfs:label "at-voc:buyer-legal-type" ;
                    rml:reference "../cac:ContractingPartyType/cbc:PartyTypeCode[@listName='buyer-legal-type']" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-10-Procedure-Buyer" ;
            rdfs:comment "Activity Authority" ;
            rr:predicate epo:hasMainActivity ;
            rr:objectMap
                [
                    rdfs:label "at-voc:main-activity" ;
                    rml:reference "../cac:ContractingActivity/cbc:ActivityTypeCode[@listName='authority-activity']" ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-610-Procedure-Buyer" ;
            rdfs:comment "ActivityEntity" ;
            rr:predicate epo:hasMainActivity ;
            rr:objectMap
                [
                    rdfs:label "at-voc:main-activity" ;
                    rml:reference "../cac:ContractingActivity/cbc:ActivityTypeCode[@listName='entity-activity']" ;
                ] ;
        ] ;
.

tedm:MG-ProcurementServiceProvider_ND-ServiceProviderParty a rr:TriplesMap ;
    rdfs:label "MG-ProcurementServiceProvider";
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:ContractingParty/cac:Party/cac:ServiceProviderParty";
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-ServiceProviderParty" ;
            rdfs:comment "Primary type declaration for MG-ProcurementServiceProvider under ND-ServiceProviderParty" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_ProcurementServiceProvider_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw')}" ;
            rr:class epo:ProcurementServiceProvider
        ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "OPT-300-Procedure-SProvider" ;
    #         rr:predicate epo:playedBy ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ND-ProviderParty ;
    #             ] ;
    #     ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:actsOnBehalfOf ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Buyer_ND-ContractingParty ;
                    # TODO: Why is this needed if this is linkage in the same source?
                    # rr:joinCondition [
                    #     rr:child "path(/*/cac:ContractingParty)" ;
                    #     rr:parent "path(.)" ;
                    # ];
                ] ;
        ] ;
        rr:predicateObjectMap
        [
            rdfs:label "OPT-030-Procedure-SProvider (ted-esen)" ;
            rdfs:comment "Provided Service Type of MG-ProcurementServiceProvider under ND-ServiceProviderParty, only for eSender" ;
            rr:predicate dct:description ;
            rr:objectMap
                [
                    rml:reference "if(/*/cac:ContractingParty/cac:Party/cac:ServiceProviderParty/cbc:ServiceTypeCode[@listName='organisation-role']/text()='ted-esen') then cbc:ServiceTypeCode else null" ;
                ] ;
        ] ;
.

tedm:MG-Procedure_ND-ProcedureProcurementScope a rr:TriplesMap ;
    rdfs:label "MG-Procedure";
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:ProcurementProject";
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            #This one maps to the parent path
            # TODO what does that mean?
            rdfs:label "ND-ProcedureProcurementScope" ;
            rdfs:comment "Primary type declaration for MG-Procedure under ND-ProcedureProcurementScope" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Procedure_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path(..)) || '?response_type=raw')}" ;
            rr:class epo:Procedure
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-22-Procedure" ;
            rdfs:comment "Internal Identifier of MG-Procedure under ND-ProcedureProcurementScope" ;
            rr:predicate epo:hasInternalIdentifier ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-Identifier-hasInternalIdentifier-Procedure_ND-ProcedureProcurementScope ;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-21-Procedure" ;
            rdfs:comment "Title of MG-Procedure under ND-ProcedureProcurementScope" ;
            rr:predicate dct:title ;
            rr:objectMap
                [
                    rml:reference "cbc:Name" ;
                    rml:languageMap [
                        fnml:functionValue [
                            rr:predicateObjectMap [
                                rr:predicate idlab-fn:str ;
                                rr:objectMap [ rml:reference "cbc:Name/@languageID" ]
                                ] ,
                                tedm:idlab-fn_executes_lookup ,
                                tedm:idlab-fn_inputFile_language ,
                                tedm:idlab-fn_fromColumn_0 ,
                                tedm:idlab-fn_toColumn_1
                        ]
                    ] ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-24-Procedure" ;
            rdfs:comment "Description of MG-Procedure under ND-ProcedureProcurementScope" ;
            rr:predicate dct:description ;
            rr:objectMap
                [
                    rml:reference "cbc:Description" ;
                    rml:languageMap [
                        rml:reference "lower-case(cbc:Description/@languageID)"
                    ] ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-300-Procedure" ;
            rdfs:comment "Additional Information of MG-Procedure under ND-ProcedureProcurementScope" ;
            rr:predicate epo:hasAdditionalInformation ;
            rr:objectMap
                [
                    rml:reference "cbc:Note";
                    rml:languageMap [
                        rml:reference "lower-case(cbc:Note/@languageID)"
                    ] ;
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rdfs:label "BT-26(a)-Procedure and BT-263-Procedure";
#            rr:predicate epo:hasAdditionalClassification  ;
#            rr:objectMap
#                [
#                    rml:reference "if(exists(descendant::cbc:ItemClassificationCode) and exists(descendant::cbc:ItemClassificationCode/@listName)) then concat(cbc:ItemClassificationCode, ':', cbc:ItemClassificationCode/@listName) else null";
#                ] ;
#        ] ;
#    rr:predicateObjectMap
#        [
#            rdfs:label "BT-26(m)-Procedure and BT-262-Procedure";
#            rr:predicate epo:hasMainClassification  ;
#            rr:objectMap
#                [
#                    rml:reference "if(exists(descendant::cbc:ItemClassificationCode) and exists(descendant::cbc:ItemClassificationCode/@listName)) then concat(cbc:ItemClassificationCode, ':', cbc:ItemClassificationCode/@listName) else null";
#                ] ;
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:foreseesContractSpecificTerm ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MG-ContractTerm_ND-ProcedurePlacePerformanceAdditionalInformation ;
                    # TODO why do this?
                    # rr:joinCondition [
                    #     rr:child "path(.)";
                    #     rr:parent "path(../.)";
                    # ];
                ]
        ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-27-Procedure";
    #         rr:predicate epo:hasEstimatedValue ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ND-ProcedureValueEstimate;
    #                 rr:joinCondition [
    #                     rr:child "path(.)";
    #                     rr:parent "path(../.)";
    #                 ];
    #             ]
    #     ] ;
.

tedm:MG-Identifier-hasInternalIdentifier-Procedure_ND-ProcedureProcurementScope a rr:TriplesMap ;
    rdfs:comment "The identifier of a procedure" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:ProcurementProject" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            # TODO decide on labeling scheme for composition links like this
            rdfs:label "MG-Identifier" ;
            rdfs:comment "Type declaration for MG-Identifier under ND-ProcedureProcurementScope" ;
            rml:reference "if (exists(cbc:ID)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_ProcedureIdentifier_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw') else null" ;
            rr:class adms:Identifier
        ] ;
    rr:predicateObjectMap
        [

            rr:predicate skos:notation ;
            rr:objectMap
                [
                    rml:reference "cbc:ID";
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-22-Procedure-Scheme" ;
            rdfs:comment "Scheme of MG-Identifier for MG-Procedure under ND-ProcedureProcurementScope" ;
            rr:predicate epo:hasScheme ;
            rr:objectMap
                [
                    rml:reference "cbc:ID/@schemeName";
                ] ;
        ] ;
.

tedm:MG-ContractTerm_ND-ProcedurePlacePerformanceAdditionalInformation a rr:TriplesMap ;
    rdfs:label "MG-ContractTerm" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:ProcurementProject/cac:RealizedLocation" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-ProcedurePlacePerformanceAdditionalInformation" ;
            rdfs:comment "Primary type declaration for MG-ContractTerm under ND-ProcedurePlacePerformanceAdditionalInformation" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_ProcurementProjectContractTerm_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw')}" ;
            rr:class epo:ContractTerm
        ] ;
    # rr:predicateObjectMap
    #     [
    #         rr:predicate epo:definesSpecificPlaceOfPerformance ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ProcurementProjectContractLocation;
    #                 rr:joinCondition [
    #                     rr:child "path(.)";
    #                     rr:parent "path(.)";
    #                 ];
    #             ]
    #     ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-727-Procedure";
    #         rr:predicate epo:hasBroadPlaceOfPerformance ;
    #         rr:objectMap
    #             [
    #                 rml:reference "descendant::cbc:Region";
    #                 rr:datatype xsd:string;
    #             ] ;
    #     ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-728-Procedure";
    #         rr:predicate epo:hasPlaceOfPerformanceAdditionalInformation ;
    #         rr:objectMap
    #             [
    #                 rml:reference "descendant::cbc:Description";
    #                 rr:datatype xsd:string;
    #             ] ;
    #     ] ;
    # this is an example of a predicate with value from a complex ancestor XPath
    rr:predicateObjectMap
        [
            rdfs:label "BT-531-Procedure" ;
            rdfs:comment "Additional Nature (different from Main) of MG-ContractTerm under ND-ProcedurePlacePerformanceAdditionalInformation" ;
            rr:predicate  epo:hasAdditionalContractNature ;
            rr:objectMap
                [
                    tedm:minSDKVersion "1.8" ;
                    rml:reference "../cac:ProcurementAdditionalType[cbc:ProcurementTypeCode/@listName='contract-nature']/cbc:ProcurementTypeCode" ;
                ] ,
                [
                    tedm:minSDKVersion "1.3" ;
                    tedm:maxSDKVersion "1.7" ;
                    # v1.3-1.7 (TODO check this XPath for the first and last versions)
                    rml:reference "descendant::cbc:ProcurementTypeCode[not(@listName='transport-service')]" ;
                ] ;
        ] ;
    # this is an example of a predicate with value from an ancestor XPath
    rr:predicateObjectMap
        [
            rdfs:label "BT-23-Procedure" ;
            rdfs:comment "Main Nature of MG-ContractTerm under ND-ProcedurePlacePerformanceAdditionalInformation" ;
            rr:predicate  epo:hasContractNatureType;
            rr:objectMap
                [
                    rml:reference "../cbc:ProcurementTypeCode";
                ] ;
        ]
.

# this is an example of a type declaration on a field with secondary assertions
tedm:MG-ProcurementProcessInformation_ND-ProcedureTenderingProcess a rr:TriplesMap ;
    rdfs:label "MG-ProcurementProcessInformation" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:TenderingProcess/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/efext:EformsExtension" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            rdfs:label "ND-ProcedureTenderingProcess" ;
            rdfs:comment "Primary type declaration for MG-ProcurementProcessInformation under ND-ProcedureTenderingProcess" ;
            rml:reference "if(exists(efbc:ProcedureRelaunchIndicator)) then 'http://data.europa.eu/a4g/resource/id_' || replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-') || '_ProcurementProcessInformation_' || unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path()) || '?response_type=raw') else null" ;
            rr:class epo:ProcurementProcessInformation

        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-634-Procedure" ;
            rdfs:comment "Procurement Relaunch of MG-ProcurementProcessInformation under ND-ProcedureTenderingProcess" ;
            rr:predicate epo:isToBeRelaunched ;
            rr:objectMap
                [
                    rml:reference "efbc:ProcedureRelaunchIndicator" ;
                    rr:datatype xsd:boolean
                ] ;
        ] ;
    # this is an example of a predicate that can link to one of multiple TMaps with the same subject IRI
    rr:predicateObjectMap
        [
            rr:predicate epo:concernsProcedure ;
            rr:objectMap
                [
                    # TODO how do we decide whether to link at ProcedureTenderingProcess or ProcedureProcurementScope?
                    rr:parentTriplesMap tedm:MG-Procedure_ND-ProcedureProcurementScope ;
                    # rr:parentTriplesMap tedm:ND-ProcedureTenderingProcess ;
                    # rr:joinCondition [
                    #     rr:child "path(/*/cac:TenderingProcess)" ;
                    #     rr:parent "path(.)" ;
                    # ] ;
                ]
        ]
.

# this is an example of a TMap which has the same subject IRI as another (tedm:MG-Procedure_ND-ProcedureProcurementScope)
tedm:MG-Procedure_ND-ProcedureTenderingProcess a rr:TriplesMap ;
    rdfs:label "MG-Procedure" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:TenderingProcess" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            #This one maps to the parent path
            # TODO why?
            rdfs:label "ND-ProcedureTenderingProcess" ;
            rdfs:comment "Type declaration for MG-Procedure under ND-ProcedureTenderingProcess" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Procedure_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path(..)) || '?response_type=raw')}" ;
            rr:class epo:Procedure
        ] ;
    #  rr:predicateObjectMap
    #     [
    #         rdfs:label "ND-Lot";#add in cm line that this goes from procedure to lot
    #         rr:predicate epo:hasProcurementScopeDividedIntoLot ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ND-Lot;
    #             ]
    #     ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-88-Procedure" ;
            rdfs:comment "Procedure Features of MG-Procedure under ND-ProcedureTenderingProcess" ;
            rr:predicate epo:hasMainFeature ;
            rr:objectMap
                [
                    rml:reference "cbc:Description" ;
                    rml:languageMap [
                        rml:reference "lower-case(cbc:Description/@languageID)"
                    ] ;
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-105-Procedure" ;
            rdfs:comment "Procedure Type of MG-Procedure under ND-ProcedureTenderingProcess" ;
            rr:predicate epo:hasProcedureType ;
            rr:objectMap
                [
                    # TODO at-voc
                    rdfs:label "at-voc:procurement-procedure-type" ;
                    rml:reference "cbc:ProcedureCode" ;
                ] ;
        ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-01-notice and BT-01(e)-notice and BT-01(f)-notice";
    #         rr:predicate  epo:hasLegalBasis  ;
    #         rr:objectMap
    #             [
    #                 rml:reference "if(exists(/*/cbc:RegulatoryDomain) or exists(cac:ProcurementLegislationDocumentReference[cbc:ID/text()='LocalLegalBasis']/cbc:ID[text()='LocalLegalBasis']) or exists(cac:ProcurementLegislationDocumentReference[cbc:ID/text()='LocalLegalBasis']/cbc:DocumentDescription)) then concat(/*/cbc:RegulatoryDomain, ' ',concat(cac:ProcurementLegislationDocumentReference[cbc:ID/text()='LocalLegalBasis']/cbc:ID[text()='LocalLegalBasis'], ' ', cac:ProcurementLegislationDocumentReference[cbc:ID/text()='LocalLegalBasis']/cbc:DocumentDescription)) else null";
    #                 rr:datatype xsd:string
    #             ] ;
    #     ]  ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-01-notice and BT-01(c)-notice and BT-01(d)-notice";
    #         rr:predicate  epo:hasLegalBasis  ;
    #         rr:objectMap
    #             [
    #                 rml:reference "if(exists(/*/cbc:RegulatoryDomain) or exists(cac:ProcurementLegislationDocumentReference[not(cbc:ID/text()=('CrossBorderLaw','LocalLegalBasis'))]/cbc:ID[not(text()=('CrossBorderLaw','LocalLegalBasis'))]) or exists(cac:ProcurementLegislationDocumentReference[not(cbc:ID/text()=('CrossBorderLaw','LocalLegalBasis'))]/cbc:DocumentDescription)) then concat(/*/cbc:RegulatoryDomain, ' ',concat(cac:ProcurementLegislationDocumentReference[not(cbc:ID/text()=('CrossBorderLaw','LocalLegalBasis'))]/cbc:ID[not(text()=('CrossBorderLaw','LocalLegalBasis'))], ' ', cac:ProcurementLegislationDocumentReference[not(cbc:ID/text()=('CrossBorderLaw','LocalLegalBasis'))]/cbc:DocumentDescription)) else null";
    #                 rr:datatype xsd:string
    #             ] ;
    #     ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-106-Procedure";
    #         rr:predicate   epo:isAccelerated  ;
    #         rr:objectMap
    #             [
    #                 rml:reference "descendant::cbc:ProcessReasonCode[@listName='accelerated-procedure']";
    #                 rr:datatype xsd:boolean
    #             ] ;
    #     ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-1351-Procedure";
    #         rr:predicate   epo:hasAcceleratedProcedureJustification  ;
    #         rr:objectMap
    #             [
    #                 rml:reference "descendant::cbc:ProcessReason";
    #                 rr:datatype xsd:string
    #             ] ;
    #     ]   ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "ProcedureTerm";
    #         rdfs:comment "This is the ProcedureTerm that is associated with a Procedure";
    #         rr:predicate epo:isSubjectToProcedureSpecificTerm ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ND-ProcedureTerms;
    #                 rr:joinCondition [
    #                     rr:child "path(/*/cac:TenderingTerms)";
    #                     rr:parent "path(.)";
    #                 ];
    #             ]
    #     ] ;
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "ND-ExclusionGrounds";
    #         rr:predicate epo:specifiesExclusionGround ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ND-ExclusionGrounds;#/*/cac:TenderingTerms/cac:TendererQualificationRequest/cac:SpecificTendererRequirement
    #                 rr:joinCondition [
    #                     rr:child "path(..)";
    #                     rr:parent "path(../../..)";
    #                 ];
    #             ]
    #     ];
    # rr:predicateObjectMap
    #     [
    #         rdfs:label "BT-09(b)-Procedure";
    #         rr:predicate epo:refersToProcedure ;
    #         rr:objectMap
    #             [
    #                 rr:parentTriplesMap tedm:ND-ProcedureTenderingProcess;
    #                 rr:joinCondition [
    #                     rr:child "path(/*/cac:TenderingProcess)";
    #                     rr:parent "path(.)";
    #                 ];
    #             ]
    #     ]
.

# this is an example of a TMap which has the same subject IRI as two others (tedm:MG-Procedure_ND-ProcedureProcurementScope and tedm:MG-Procedure_ND-TenderingProcess)
tedm:MG-Procedure_ND-AcceleratedProcedure a rr:TriplesMap ;
    rdfs:label "MG-Procedure" ;
    rml:logicalSource
        [
            rml:source "data/source.xml" ;
            rml:iterator "/*/cac:TenderingProcess/cac:ProcessJustification[cbc:ProcessReasonCode/@listName='accelerated-procedure']" ;
            rml:referenceFormulation ql:XPath
        ] ;
    rr:subjectMap
        [
            #This one maps to the parent path
            # this is an example of a subject IRI with a hash on the grandparent
            rdfs:label "ND-AcceleratedProcedure" ;
            rdfs:comment "Type declaration for MG-Procedure under ND-AcceleratedProcedure" ;
            rr:template "http://data.europa.eu/a4g/resource/id_{replace(replace(/*/cbc:ID[@schemeName='notice-id'], ' ', '-' ), '/' , '-')}_Procedure_{unparsed-text('https://digest-api.ted-data.eu/api/v1/hashing/fn/uuid/' || encode-for-uri(path(../..)) || '?response_type=raw')}" ;
            rr:class epo:Procedure
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-106-Procedure" ;
            rdfs:comment "Procedure Accelerated of MG-Procedure under ND-AcceleratedProcedure" ;
            rr:predicate epo:isAccelerated ;
            rr:objectMap
                [
                    tedm:minSDKVersion "1.5.12" ;
                    tedm:maxSDKVersion "1.7" ;
                    rml:reference "cbc:ProcessReasonCode[@listName='accelerated-procedure']" ;
                    rr:datatype xsd:boolean
                ] ,
                [
                    # this is an example of a version-specific assertion that has no difference
                    # with its other counterparts due to simple changes in the XPath only
                    # i.e. one could've chosen to ignore this, but we choose to be consistent
                    tedm:minSDKVersion "1.8" ;
                    rml:reference "cbc:ProcessReasonCode" ;
                    rr:datatype xsd:boolean
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rdfs:label "BT-1351-Procedure" ;
            rdfs:comment "Procedure Accelerated Justification of MG-Procedure under ND-AcceleratedProcedure" ;
            rr:predicate epo:hasAcceleratedProcedureJustification ;
            rr:objectMap
                [
                    rml:reference "cbc:ProcessReason" ;
                    rml:languageMap [
                        rml:reference "lower-case(cbc:ProcessReason/@languageID)"
                    ] ;
                ] ;
        ]   ;
.

##--- Function Parameters ---

tedm:idlab-fn_executes_lookup rr:predicate fno:executes ; rr:objectMap [ rr:constant idlab-fn:lookup ] .
tedm:idlab-fn_inputFile_language rr:predicate idlab-fn:inputFile ; rr:objectMap [ rr:constant "transformation/resources/language.csv" ] .
tedm:idlab-fn_fromColumn_0 rr:predicate idlab-fn:fromColumn ; rr:objectMap [ rr:constant "0" ] .
tedm:idlab-fn_toColumn_1 rr:predicate idlab-fn:toColumn ; rr:objectMap [ rr:constant "1" ] .

##--- Helper Lists ---

tedm:buyerLegalType a rr:TriplesMap ;
    rml:logicalSource
        [
            rml:source "transformation/resources/buyer_legal_type.csv" ;
            rml:referenceFormulation ql:CSV
        ] ;
    rr:subjectMap
        [
            rml:reference
                "conceptURI" ;
        ]
.

tedm:nuts a rr:TriplesMap ;
    rml:logicalSource
        [
            rml:source "transformation/resources/nuts.json" ;
            rml:iterator "$.results.bindings[*]" ;
            rml:referenceFormulation ql:JSONPath
        ] ;
    rr:subjectMap
        [
            rml:reference
                "conceptURI.value" ;
        ]
.

tedm:country a rr:TriplesMap ;
    rml:logicalSource
        [
            rml:source "transformation/resources/country.json" ;
            rml:iterator "$.results.bindings[*]" ;
            rml:referenceFormulation ql:JSONPath
        ] ;
    rr:subjectMap
        [
            rml:reference
                "conceptURI.value" ;
        ]
.
